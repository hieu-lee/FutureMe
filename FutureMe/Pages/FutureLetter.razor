@page "/letters/{id}" 
@page "/letters"
@inject FutureMeClient Http 
@inject ISnackbar Snackbar
@inject SessionData Session

<MudContainer MaxWidth="MaxWidth.Large">
    <MudCard Style="max-width: 65ch; margin: 3ch auto; padding: 3ch; border-top: 10px solid #594AE2">
        <EditForm Model="MyFutureLetter" OnValidSubmit="ValidSubmit">
            <DataAnnotationsValidator />
                <div class="d-flex justify-content-between">
                    @if (TitleEditing)
                    {
                        <MudTextField Label="Tiêu đề" @bind-Value="@MyFutureLetter.Title" For="() => MyFutureLetter.Title" />
                    }
                    else
                    {
                        <div class="d-flex align-items-center">
                            <MudText Typo="Typo.h5">@MyFutureLetter.Title</MudText>
                        </div>
                    }
                    <div class="d-flex align-items-center">
                        <MudIconButton @onclick="() => { TitleEditing = !TitleEditing; }">
                            <MudIcon Icon="@EditIcon" />
                        </MudIconButton>
                    </div>
                </div>
                <hr />
                <MudTextField Required="true" Placeholder="Gửi tôi trong tương lai" @bind-Value="MyFutureLetter.Content" For="@(() => MyFutureLetter.Content)" Lines="10" />
                <MudText Typo="Typo.caption">@MyFutureLetter.WordCount() word(s)</MudText>
                <br />
                @if (!ExactDateMode)
                {
                    <MudText Typo="Typo.subtitle2" Style="margin-top: 3ch;">GỬI TỚI TÔI TRONG</MudText>
                    <div>
                        <MudChip Size="Size.Small" @onclick="() => { SetDeliverDate(1); }" Style="cursor: pointer" Color="Color.Primary" Variant="(YearsDelivery == 1)?Variant.Filled:Variant.Outlined">1 năm</MudChip>
                        <MudChip Size="Size.Small" @onclick="() => { SetDeliverDate(3); }" Style="cursor: pointer" Color="Color.Primary" Variant="(YearsDelivery == 3)?Variant.Filled:Variant.Outlined">3 năm</MudChip>
                        <MudChip Size="Size.Small" @onclick="() => { SetDeliverDate(5); }" Style="cursor: pointer" Color="Color.Primary" Variant="(YearsDelivery == 5)?Variant.Filled:Variant.Outlined">5 năm</MudChip>
                        <MudText @onclick="() => { ExactDateMode = true; }" Color="Color.Primary" Typo="Typo.caption" Style="cursor: pointer">Chọn ngày cụ thể</MudText>
                    </div>
                }
                else
                {
                    <MudText Typo="Typo.subtitle2" Style="margin-top: 3ch;">GỬI TỚI TÔI VÀO NGÀY</MudText>
                    <div class="d-flex">
                        <div>
                            <MudDatePicker MinDate="DateTime.Today" Label="Ngày nhận thư" @bind-Date="MyFutureLetter.DeliverDate" For="@(() => MyFutureLetter.DeliverDate)" />
                        </div>
                        <div class="d-flex ml-4 align-items-end">
                            <MudText @onclick="() => { ExactDateMode = false; }" Color="Color.Primary" Typo="Typo.caption" Style="cursor: pointer;">Chọn khoảng thời gian</MudText>
                        </div>
                    </div>
                }
                <MudText Typo="Typo.subtitle2" Style="margin-top: 3ch;">ĐÂY LÀ MỘT BỨC THƯ</MudText>
                <div>
                    <MudChip Size="Size.Small" @onclick="() => { MyFutureLetter.Privacy = PrivacyMode.Private; }" Style="cursor: pointer" Color="Color.Primary" Variant="(MyFutureLetter.Privacy == PrivacyMode.Private)?Variant.Filled:Variant.Outlined">Riêng tư</MudChip>
                    <MudChip Size="Size.Small" @onclick="() => { MyFutureLetter.Privacy = PrivacyMode.Anonymous; }" Style="cursor: pointer" Color="Color.Primary" Variant="(MyFutureLetter.Privacy == PrivacyMode.Anonymous)?Variant.Filled:Variant.Outlined">Công khai nhưng ẩn danh</MudChip>
                    <MudChip Size="Size.Small" @onclick="() => { MyFutureLetter.Privacy = PrivacyMode.Public; }" Style="cursor: pointer" Color="Color.Primary" Variant="(MyFutureLetter.Privacy == PrivacyMode.Public)?Variant.Filled:Variant.Outlined">Hoàn toàn công khai</MudChip>
                </div>
                <MudText Typo="Typo.subtitle2" Style="margin-top: 3ch;">ĐỊA CHỈ EMAIL</MudText>
                <MudTextField Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.MailOutline" Style="margin: 1ch 0;" @bind-Value="MyFutureLetter.Email" Required="true" Placeholder="Email của bạn" />
                <MudCardActions>
                    <MudButton Disabled="loading" Style="margin: 0 auto;" Variant="Variant.Filled" Color="Color.Secondary" ButtonType="ButtonType.Submit">Gửi tới tương lai!</MudButton>
                </MudCardActions>
                <MudText Typo="Typo.body2">Bạn sẽ nhận được một email để xác thực email của bạn!</MudText>
            </EditForm>
    </MudCard>
</MudContainer>

@code {
    [Parameter]
    public string Id { get; set; }
    bool loading = false;
    Letter MyFutureLetter = new() { Title = $"Một bức thư từ {DateTime.Now.ToShortDateString()}", Content = "Gửi tôi trong tương lai,\n" };
    bool TitleEditing = false;
    string EditIcon => (TitleEditing) ? Icons.Material.Filled.EditOff : Icons.Material.Filled.Edit;
    int YearsDelivery = 1;
    bool ExactDateMode = false;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(Id))
        {
            SetDeliverDate(YearsDelivery);
        }
        else
        {
            MyFutureLetter = await Http.LetterAndFeedbackClient.GetFromJsonAsync<Letter>($"api/Letter/get-letrer/{Id}");
        }
    }

    bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    private void SetDeliverDate(int i)
    {
        YearsDelivery = i;
        MyFutureLetter.DeliverDate = DateTime.Now.Date.AddYears(YearsDelivery);
    }

    private async Task ValidSubmit()
    {
        loading = true;
        if (IsValidEmail(MyFutureLetter.Email))
        {
            if (string.IsNullOrWhiteSpace(Id))
            {
                await Http.LetterAndFeedbackClient.PutAsJsonAsync<Letter>("api/Letter/edit-letter", MyFutureLetter);
            }
            else
            {
                await Http.LetterAndFeedbackClient.PostAsJsonAsync<Letter>("api/Letter/create-letter", MyFutureLetter);
            }
            string m = "Gửi thư thành công!";
            if (!Session.Logged || MyFutureLetter.Email != Session.MyAccount.Email)
            {
                m += " Hãy xác thực email của bạn.";  
            }
            Snackbar.Add(m, Severity.Success);
        }
        else
        {
            Snackbar.Add("Địa chỉ email của bạn không hợp lệ", Severity.Error);
        }
        loading = false;
    }
}
