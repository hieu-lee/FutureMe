@page "/read-letters"
@inject FutureMeClient Http
@inject NavigationManager NavManager
@inject SessionData Session
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<header>
    <MudText Typo="Typo.h4" Style="color: #ffffff">
        Những bức thư du hành<br />Từ quá khứ đến hiện tại
    </MudText>
</header>
@if (DataLoading)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
    <MudText Typo="Typo.h6" Style="text-align: center;">Đang tải...</MudText>
}
else
{
    <div style="background: #f0f0f0">
        <MudContainer MaxWidth="MaxWidth.Large" Style="padding: 5ch;">
            <ul style="list-style: none">
                <Virtualize Items="letters" Context="letter">
                    <li class="letter-card-holder" @onclick="@(() => { NavManager.NavigateTo($"read-letter/{letter.Id}"); })">
                        <LetterCard @bind-LetterItem="letter" />
                    </li>
                </Virtualize>
            </ul>
        </MudContainer>
    </div>
}




@code {
    bool DataLoading = true;
    const string lorem = "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Qui dicta minus molestiae vel beatae natus eveniet ratione temporibus aperiam harum alias officiis assumenda officia quibusdam deleniti eos cupiditate dolore doloribus!";
    List<Letter> letters = new();

    protected override async Task OnInitializedAsync()
    {
        if (!Session.Logged)
        {
            Session.Key = await localStorage.GetItemAsync<string>("FutureMeKey");
            if (!string.IsNullOrWhiteSpace(Session.Key))
            {
                Session.MyAccount = await Http.UserClient.GetFromJsonAsync<Account>($"api/Accounts/my-account/{Session.Key}");
            }
        }
        DataLoading = false;
        letters = await Http.LetterAndFeedbackClient.GetFromJsonAsync<List<Letter>>("api/Letter/get-all-public-letters");
    }
}
