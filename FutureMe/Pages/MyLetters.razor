@page "/my-letters"
@inject ISnackbar Snackbar
@inject FutureMeClient Http
@inject SessionData Session
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<MudContainer MaxWidth="MaxWidth.Large">
    <div style="margin: 10ch auto; max-width: 83ch;">
        <div>
            <div class="d-flex">
                <MudIcon Style="margin-right: 1ch" Color="Color.Primary" Icon="@Icons.Material.Filled.AccessTime" />
                <MudText>Đang du hành thời gian (@TravelingLetters.Count thư)</MudText>
            </div>
            @if (TravelingLetters.Count > 0)
            {
                <div style="background: #F5F4FD; padding: 2ch; border-radius: 5px; margin: 2ch 0">
                    <MudText Color="Color.Primary">Bạn có @TravelingLetters.Count bức thư đã gửi tới tương lai và đang chờ đón bạn</MudText>
                    @if (!ShowFuture)
                    {
                        <MudText Color="Color.Primary" Typo="Typo.caption">Chúng tôi giấu thông tin về những bức thư trong tương lai để bảo toàn sự bất ngờ cho bạn. Nếu bạn muốn thay đổi địa chỉ email hoặc xóa 1 bức thư, <span @onclick="() => { ShowFuture = !ShowFuture; }" style="text-decoration: underline; cursor: pointer;">hiển thị những bức thư tương lai</span></MudText>
                    }
                    else
                    {
                        <MudText Color="Color.Primary" Typo="Typo.caption">Lắng nghe những bức thư đang du hành đến tương lai của bạn. Bạn có thể cập nhật địa chỉ email nhận thư hoặc <span @onclick="() => { ShowFuture = !ShowFuture; }" style="text-decoration: underline; cursor: pointer;">giấu những bức thư tương lai</span></MudText>
                    }
                </div>
                @if (ShowFuture)
                {
                    <MudTable Striped="true" Style="overflow-x: scroll;" Items="@TravelingLetters" Hover="true" SortLabel="Sort By">
                        <HeaderContent>
                            <MudTh><MudTableSortLabel SortBy="new Func<Letter, object>(s => s.Title)">Tiêu đề</MudTableSortLabel></MudTh>
                            <MudTh><MudTableSortLabel Enabled="true" InitialDirection="SortDirection.Descending" SortBy="new Func<Letter, object>(s => s.DateCreate)">Ngày viết</MudTableSortLabel></MudTh>
                            <MudTh><MudTableSortLabel SortBy="new Func<Letter, object>(s => s.DeliverDate)">Ngày nhận</MudTableSortLabel></MudTh>
                            <MudTh><MudTableSortLabel SortBy="new Func<Letter, object>(s => s.Email)">Tới</MudTableSortLabel></MudTh>
                            <MudTh><MudTableSortLabel SortBy="new Func<Letter, object>(s => s.WordNum)">Số từ</MudTableSortLabel></MudTh>
                            <MudTh></MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Tiêu đề"><MudLink Href="letters">@context.Title</MudLink></MudTd>
                            <MudTd DataLabel="Ngày viết">@context.DateCreate.ToShortDateString()</MudTd>
                            <MudTd DataLabel="Ngày nhận">@context.DeliverDate.Value.ToShortDateString()</MudTd>
                            <MudTd DataLabel="Tới">@context.Email</MudTd>
                            <MudTd DataLabel="Số từ">@context.WordNum</MudTd>
                            <MudTd>
                                <div class="d-flex">
                                    <MudIconButton @onclick="() => { PrivacyChange(context); }" Icon="@LetterPrivacyIcon(context)" />
                                    <MudIconButton @onclick="() => { DeleteTravelingLetter(context); }" Style="margin-left: 0.5ch" Icon="@Icons.Material.Filled.Delete" />
                                </div>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                }
            }
            else
            {
                <div style="background: #F5F4FD; padding: 2ch; border-radius: 5px; margin: 2ch 0">
                    <MudText Color="Color.Primary">Bạn không có bức thư nào đang du hành. Hãy đi viết một bức nhé!</MudText>
                </div>
            }
        </div>
        <div style="margin-top: 3ch; padding-bottom: 10ch;">
            <div class="d-flex">
                <MudIcon Style="margin-right: 1ch" Color="Color.Success" Icon="@Icons.Material.Filled.Check" />
                <MudText>Đã nhận (@DeliveredLetters.Count thư)</MudText>
            </div>
            @if (DeliveredLetters.Count == 0)
            {
                <div style="background: #fafafa; padding: 2ch; border-radius: 5px; margin: 2ch 0">
                    <MudText>Bạn chưa nhận được bức thư nào. Nhưng khi những bức thư đến, bạn sẽ thấy chúng ở đây.</MudText>
                </div>
            }
            else
            {
                <div style="background: #fafafa; padding: 2ch; border-radius: 5px; margin: 2ch 0">
                    <MudText>Bạn đã nhận được @DeliveredLetters.Count bức thư du hàng từ quá khứ!</MudText>
                </div>
                <MudTable Striped="true" Style="overflow-x: scroll;" Items="@DeliveredLetters" Hover="true" SortLabel="Sort By">
                    <HeaderContent>
                        <MudTh><MudTableSortLabel SortBy="new Func<Letter, object>(s => s.Title)">Tiêu đề</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Letter, object>(s => s.DateCreate)">Ngày viết</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel Enabled="true" InitialDirection="SortDirection.Descending" SortBy="new Func<Letter, object>(s => s.DeliverDate)">Ngày nhận</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Letter, object>(s => s.Email)">Tới</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<Letter, object>(s => s.WordNum)">Số từ</MudTableSortLabel></MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Tiêu đề"><MudLink Href="letters">@context.Title</MudLink></MudTd>
                        <MudTd DataLabel="Ngày viết">@context.DateCreate.ToShortDateString()</MudTd>
                        <MudTd DataLabel="Ngày nhận">@context.DeliverDate.Value.ToShortDateString()</MudTd>
                        <MudTd DataLabel="Tới">@context.Email</MudTd>
                        <MudTd DataLabel="Số từ">@context.WordNum</MudTd>
                        <MudTd>
                            <div class="d-flex">
                                <MudIconButton @onclick="() => { PrivacyChange(context); }" Icon="@LetterPrivacyIcon(context)" />
                                <MudIconButton @onclick="() => { DeleteDeliveredLetter(context); }" Style="margin-left: 0.5ch" Icon="@Icons.Material.Filled.Delete" />
                            </div>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            }
        </div>
    </div>
</MudContainer>

@code {
    static string email = "hieuld@gmail.com";
    static string[] PrivacyIcons = new string[3]
    {
        Icons.Material.Filled.Lock,
        Icons.Custom.Brands.Awesome,
        Icons.Material.Filled.Public
        };
    HashSet<Letter> TravelingLetters = new();
    HashSet<Letter> DeliveredLetters = new();
    bool ShowFuture = false;

    protected override async Task OnInitializedAsync()
    {
        var task1 = Http.LetterAndFeedbackClient.GetFromJsonAsync<HashSet<Letter>>($"api/Letter/get-delivered-letters-email/{Session.MyAccount.Email}");
        var task2 = Http.LetterAndFeedbackClient.GetFromJsonAsync<HashSet<Letter>>($"get-traveling-letters-email/{Session.MyAccount.Email}");
        await Task.WhenAll(task1, task2);
        TravelingLetters = await task1;
        DeliveredLetters = await task2;
    }

    private string LetterPrivacyIcon(Letter letter)
    {
        switch (letter.Privacy)
        {
            case (PrivacyMode.Private):
                return PrivacyIcons[0];
            case (PrivacyMode.Anonymous):
                return PrivacyIcons[1];
            default:
                return PrivacyIcons[2];
        }
    }

    private void PrivacyChange(Letter letter)
    {
        switch (letter.Privacy)
        {
            case (PrivacyMode.Private):
                letter.Privacy = PrivacyMode.Anonymous;
                return;
            case (PrivacyMode.Anonymous):
                letter.Privacy = PrivacyMode.Public;
                return;
            default:
                letter.Privacy = PrivacyMode.Private;
                return;
        }
    }

    private async Task DeleteTravelingLetter(Letter letter)
    {
        TravelingLetters.Remove(letter);
        await Http.LetterAndFeedbackClient.DeleteAsync($"delete-letter-by-id/{letter.Id}");
        Snackbar.Add("Xóa thành công một bức thư", Severity.Success);
    }

    private async Task DeleteDeliveredLetter(Letter letter)
    {
        DeliveredLetters.Remove(letter);
        await Http.LetterAndFeedbackClient.DeleteAsync($"delete-letter-by-id/{letter.Id}");
        Snackbar.Add("Xóa thành công một bức thư", Severity.Success);
    }
}
