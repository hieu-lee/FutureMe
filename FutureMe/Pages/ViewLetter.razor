@page "/read-letter"

<MudContainer MaxWidth="MaxWidth.Large">
    <MudCard Style="padding: 5ch; margin: 5ch auto;">
        <MudText Typo="Typo.subtitle2">THỜI GIAN DU HÀNH - @TravelledTime.Days NGÀY</MudText>
        <div class="content">
            <h4>Một bức thư từ @MyLetter.DateCreate.ToShortDateString()</h4>
            <MudDivider DividerType="DividerType.FullWidth" />
            <p style="margin-top: 1ch;">
                @MyLetter.Content
            </p>
        </div>
        <MudText Style="color: #999" Typo="Typo.caption">@MyLetter.DateCreate.ToLongDateString() &#8594; @MyLetter.DeliverDate.Value.ToLongDateString() • @WordCount(MyLetter.Content) word(s)</MudText>
        <div class="d-flex justify-content-end">
            <div>
                <MudTooltip Text="Like">
                    <MudIconButton @onclick="LikesChanged" Icon="@LikeIcon" />
                </MudTooltip>
                @MyLetter.Likes
            </div>
            <div style="margin-left: 2ch;">
                <MudTooltip Text="Report">
                    <MudIconButton Icon="@FlagIcon" @onclick="() => { Flagged = !Flagged; }" />
                </MudTooltip>
            </div>
        </div>
    </MudCard>
</MudContainer>

@code {
    const string lorem = "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Qui dicta minus molestiae vel beatae natus eveniet ratione temporibus aperiam harum alias officiis assumenda officia quibusdam deleniti eos cupiditate dolore doloribus!";
    Letter MyLetter;
    bool Flagged = false;
    bool Liked = false;
    TimeSpan TravelledTime => MyLetter.DeliverDate.Value - MyLetter.DateCreate;
    string LikeIcon => Liked ? Icons.Material.Filled.Favorite : Icons.Material.Filled.FavoriteBorder;
    string FlagIcon => Flagged ? Icons.Material.Filled.Flag : Icons.Material.Filled.OutlinedFlag;

    protected override void OnInitialized()
    {
        MyLetter = new()
        {
            Content = lorem + lorem + lorem + lorem + lorem,
            DeliverDate = DateTime.Now,
            Privacy = PrivacyMode.Public
        };
    }

    private void LikesChanged()
    {
        Liked = !Liked;
        if (Liked)
        {
            MyLetter.Likes++;
        }
        else
        {
            MyLetter.Likes--;
        }
    }

    private int WordCount(string text)
    {
        int wordCount = 0, index = 0;

        // skip whitespace until first word
        while (index < text.Length && char.IsWhiteSpace(text[index]))
            index++;

        while (index < text.Length)
        {
            // check if current char is part of a word
            while (index < text.Length && !char.IsWhiteSpace(text[index]))
                index++;

            wordCount++;

            // skip whitespace until next word
            while (index < text.Length && char.IsWhiteSpace(text[index]))
                index++;
        }
        return wordCount;
    }
}
