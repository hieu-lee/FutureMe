@inject FutureMeClient Http
@inject SessionData Session

<div class="letter-card">
    <MudText Typo="Typo.subtitle2">THỜI GIAN DU HÀNH - @TravelledTime.Days NGÀY</MudText>
    <div class="content">
        <h4>@LetterItem.Title</h4>
        <MudText Style="white-space: pre-line">
            @DisplayContent
        </MudText>
    </div>
    <MudText Style="color: #999" Typo="Typo.caption">@LetterItem.DateCreate.ToLongDateString() &#8594; @LetterItem.DeliverDate.Value.ToLongDateString() • @LetterItem.WordCount() word(s)</MudText>
    <div class="d-flex justify-content-end">
        <div>
            <MudIconButton @onclick="LikesChanged" Icon="@LikeIcon" />
            @LetterItem.Likes
        </div>
        <div style="margin-left: 2ch;">
            <MudIconButton Icon="@FlagIcon" @onclick="() => { Flagged = !Flagged; }" />
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Letter LetterItem
    {
        get => _LetterItem;
        set
        {
            if (_LetterItem == value) return;
            _LetterItem = value;
            LetterItemChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<Letter> LetterItemChanged { get; set; }

    bool Flagged = false;
    bool Liked = false;
    Letter _LetterItem;
    TimeSpan TravelledTime => LetterItem.DeliverDate.Value - LetterItem.DateCreate;
    string DisplayContent;
    string LikeIcon => Liked ? Icons.Material.Filled.Favorite : Icons.Material.Filled.FavoriteBorder;
    string FlagIcon => Flagged ? Icons.Material.Filled.Flag : Icons.Material.Filled.OutlinedFlag;

    protected override async Task OnInitializedAsync()
    {
        DisplayContent = (LetterItem.Content.Length > 500) ? LetterItem.Content.Substring(0, 500) + "..." : LetterItem.Content;
        if (Session.Logged)
        {
            Liked = await Http.UserClient.GetFromJsonAsync<bool>($"api/Likes/get-like-state/{Session.MyAccount.Email}/{LetterItem.Id}");
        }
    }

    private async Task LikesChanged()
    {
        Liked = !Liked;
        if (Liked)
        {
            LetterItem.Likes++;
            if (Session.Logged)
            {
                var task1 = Http.LetterAndFeedbackClient.PutAsJsonAsync("api/Letter/letter-increment-likes", LetterItem);
                var task2 = Http.UserClient.PutAsJsonAsync<string>($"api/Likes/add-like-state/{LetterItem.Id}", Session.MyAccount.Email);
                await Task.WhenAll(task1, task2);
            }
            else
            {
                await Http.LetterAndFeedbackClient.PutAsJsonAsync("api/Letter/letter-increment-likes", LetterItem);
            }
        }
        else
        {
            LetterItem.Likes--;
            if (Session.Logged)
            {
                var task1 = Http.LetterAndFeedbackClient.PutAsJsonAsync("api/Letter/letter-decrement-likes", LetterItem);
                var task2 = Http.UserClient.PutAsJsonAsync<string>($"api/Likes/delete-like-state/{LetterItem.Id}", Session.MyAccount.Email);
                await Task.WhenAll(task1, task2);
            }
            await Http.LetterAndFeedbackClient.PutAsJsonAsync("api/Letter/letter-decrement-likes", LetterItem);
        }
    }

}
